{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 032484c188a6cb4f58d0","webpack:///./src/TreeView.tsx","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack:///./src/InsertTarget.tsx","webpack:///external \"react-dnd\"","webpack:///./src/DraggedNode.tsx","webpack:///./src/InsertTarget.styles.ts","webpack:///./src/Node.tsx","webpack:///external {\"root\":\"Immutable\",\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}","webpack:///external \"classnames\""],"names":[],"mappings":"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","file":"react-dnd-treeview.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"react-dnd\"), require(\"immutable\"), require(\"classnames\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"react-dnd\", \"immutable\", \"classnames\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-dnd-treeview\"] = factory(require(\"react\"), require(\"react-dnd\"), require(\"immutable\"), require(\"classnames\"));\n\telse\n\t\troot[\"react-dnd-treeview\"] = factory(root[\"React\"], root[\"react-dnd\"], root[\"Immutable\"], root[\"classnames\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 032484c188a6cb4f58d0\n **/","import React from \"react\";\nimport Immutable from \"immutable\";\nimport {\n  DragSource,\n  DragSourceConnector,\n  DragSourceMonitor,\n  DragSourceSpec,\n  ConnectDragSource,\n  DropTarget,\n  DropTargetConnector,\n  DropTargetMonitor,\n  DropTargetSpec,\n  ConnectDropTarget,\n} from \"react-dnd\";\n\nimport { TreeNode, TreeNodeID, TreeViewProps } from \"./react-dnd-treeview.d.ts\";\nimport \"./InsertTarget\";\nimport { TreeViewItemList } from \"./Node\";\n\n\nexport const TreeView: React.Factory<TreeViewProps> =\n  (props: TreeViewProps) => (\n    <div className={ props.classNames.treeView }>\n      <TreeViewItemList\n        parentNode={ null }\n        nodes={ props.rootNodes }\n        renderNode={ props.renderNode }\n        classNames={ props.classNames }\n        onMoveNode={ props.onMoveNode }\n        />\n    </div>\n  );\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TreeView.tsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n ** module id = 2\n ** module chunks = 0\n **/","import React from \"react\";\nimport {\n  DropTarget,\n  DropTargetConnector,\n  DropTargetMonitor,\n  DropTargetSpec,\n  ConnectDropTarget,\n} from \"react-dnd\";\n\nimport { TreeNode, TreeNodeID, MoveTreeNode } from \"./react-dnd-treeview.d.ts\";\nimport { TYPE, DraggedNode } from \"./DraggedNode\";\nimport { Styles } from \"./InsertTarget.styles.ts\";\n\nexport interface TreeViewInsertTargetProps {\n  readonly parentNode: TreeNode;\n  readonly parentChildIndex: number;\n  readonly precedingNode: TreeNode;\n  readonly insertBefore: boolean;\n  readonly onMoveNode: MoveTreeNode;\n}\n\ninterface TreeViewInsertTargetDropProps {\n  readonly connectDropTarget: ConnectDropTarget;\n  readonly canDrop: boolean;\n  readonly isDropping: boolean;\n}\n\nconst TreeViewInsertTarget = (props: TreeViewInsertTargetProps & TreeViewInsertTargetDropProps) =>\n  props.connectDropTarget(\n    <div\n      style={\n        Object.assign(\n          {},\n          props.insertBefore ? Styles.insertBeforeTarget : Styles.insertAfterTarget,\n          props.canDrop ? Styles.insertTargetCanDrop : {},\n          props.isDropping ? Styles.insertTargetDropping : {}\n        )\n      }\n      >\n      <div style={ props.isDropping ? Styles.insertTargetMarkerDropping : {} } />\n    </div>\n  );\n\nconst handleCanDrop = (\n  props: TreeViewInsertTargetProps,\n  monitor: DropTargetMonitor,\n  item: DraggedNode\n) => (\n    !(\n      props.parentNode === item.parentNode &&\n      (\n        props.parentChildIndex === item.parentChildIndex ||\n        props.parentChildIndex === item.parentChildIndex + 1\n      )\n    ) &&\n    !item.allSourceIDs.contains(props.parentNode ? props.parentNode.id : null)\n  );\n\nconst handleDrop = (\n  props: TreeViewInsertTargetProps,\n  monitor: DropTargetMonitor,\n  component: React.Component<TreeViewInsertTargetProps, any>,\n  item: DraggedNode\n) => (\n    props.onMoveNode({\n      oldParentNode: item.parentNode,\n      oldParentChildIndex: item.parentChildIndex,\n      oldPrecedingNode: item.precedingNode,\n      node: item.node,\n      newParentNode: props.parentNode,\n      newParentChildIndex: props.parentChildIndex,\n      newPrecedingNode: props.precedingNode,\n    }),\n    ({\n      parentNode: props.parentNode,\n      parentChildIndex: props.parentChildIndex,\n    })\n  );\n\nconst nodeTarget: DropTargetSpec<TreeViewInsertTargetProps> = {\n  drop: (props, monitor, component) => monitor.didDrop()\n    ? undefined // some child already handled drop\n    : handleDrop(props, monitor, component, monitor.getItem() as DraggedNode),\n  canDrop: (props, monitor) => handleCanDrop(props, monitor, monitor.getItem() as DraggedNode),\n};\n\nconst collectNodeDropProps =\n  (connect: DropTargetConnector, monitor: DropTargetMonitor): TreeViewInsertTargetDropProps => ({\n    connectDropTarget: connect.dropTarget(),\n    canDrop: monitor.canDrop(),\n    isDropping: monitor.isOver({ shallow: true }) && monitor.canDrop(),\n  });\n\nexport const DroppableTreeViewInsertTarget =\n  DropTarget([TYPE], nodeTarget, collectNodeDropProps)(TreeViewInsertTarget);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/InsertTarget.tsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react-dnd\"\n ** module id = 4\n ** module chunks = 0\n **/","import Immutable from \"immutable\";\n\nimport { TreeNode, TreeNodeID } from \"./react-dnd-treeview.d.ts\";\n\nexport const TYPE = \"TreeNode\";\n\nexport interface DraggedNode {\n  node: TreeNode;\n  allSourceIDs: Immutable.Set<TreeNodeID>;\n  parentNode: TreeNode;\n  parentChildIndex: number;\n  precedingNode: TreeNode;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/DraggedNode.tsx\n **/","import React from \"react\";\n\nnamespace NormalStyles {\n\n  export const insertTarget: React.CSSProperties = {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    height: \"1em\",\n    position: \"absolute\",\n    zIndex: 1,\n    display: \"none\",\n  };\n\n  export const insertBeforeTarget: React.CSSProperties = {\n    top: \"-0.5em\",\n  };\n\n  export const insertAfterTarget: React.CSSProperties = {\n    bottom: \"-0.5em\",\n  };\n\n  export const insertTargetCanDrop: React.CSSProperties = {\n    display: \"flex\",\n  };\n\n  export const insertTargetDropping: React.CSSProperties = {\n  };\n\n  export const insertTargetMarkerDropping: React.CSSProperties = {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    height: \"3px\",\n    borderRadius: \"2px\",\n    background: \"linear-gradient(90deg, gray, white)\",\n    alignSelf: \"center\",\n  };\n\n}\n\nnamespace DebugStyles {\n\n  export const insertTarget: React.CSSProperties = {\n    opacity: 0.5,\n  };\n\n  export const insertTargetCanDrop: React.CSSProperties = {\n  };\n\n  export const insertTargetDropping: React.CSSProperties = {\n    opacity: 0.9,\n  };\n\n  export const insertBeforeTarget: React.CSSProperties = {\n    backgroundColor: \"#ffffdd\",\n  };\n\n  export const insertAfterTarget: React.CSSProperties = {\n    backgroundColor: \"#ffddff\",\n  };\n\n}\n\nconst isDebug = false;\n\nexport namespace Styles {\n\n  export const insertBeforeTarget = Object.assign(\n    {},\n    NormalStyles.insertTarget,\n    NormalStyles.insertBeforeTarget,\n    isDebug ? DebugStyles.insertTarget : {},\n    isDebug ? DebugStyles.insertBeforeTarget : {}\n  );\n\n  export const insertAfterTarget = Object.assign(\n    {},\n    NormalStyles.insertTarget,\n    NormalStyles.insertAfterTarget,\n    isDebug ? DebugStyles.insertTarget : {},\n    isDebug ? DebugStyles.insertAfterTarget : {}\n  );\n\n  export const insertTargetCanDrop: React.CSSProperties = Object.assign(\n    {},\n    NormalStyles.insertTargetCanDrop,\n    isDebug ? DebugStyles.insertTargetCanDrop : {}\n  );\n\n  export const insertTargetDropping: React.CSSProperties = Object.assign(\n    {},\n    NormalStyles.insertTargetDropping,\n    isDebug ? DebugStyles.insertTargetDropping : {}\n  );\n\n  export const insertTargetMarkerDropping: React.CSSProperties =\n    NormalStyles.insertTargetMarkerDropping;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/InsertTarget.styles.ts\n **/","import Immutable from \"immutable\";\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport {\n    DragSource,\n    DragSourceConnector,\n    DragSourceMonitor,\n    DragSourceSpec,\n    ConnectDragSource,\n} from \"react-dnd\";\n\nimport {TreeNode, TreeNodeID, TreeNodeList, MoveTreeNode, TreeViewClassNames} from \"./react-dnd-treeview.d.ts\";\nimport {DraggedNode, TYPE} from \"./DraggedNode\";\nimport {DroppableTreeViewInsertTarget} from \"./InsertTarget\";\n\nexport interface TreeViewItemProps {\n    readonly parentNode: TreeNode;\n    readonly parentChildIndex: number;\n    readonly precedingNode: TreeNode;\n    readonly node: TreeNode;\n    readonly classNames: TreeViewClassNames;\n    readonly renderNode: (node: TreeNode) => JSX.Element;\n    readonly onMoveNode: MoveTreeNode;\n}\n\ninterface TreeViewItemDragProps {\n    readonly connectDragSource: ConnectDragSource;\n    readonly isDragging: boolean;\n}\n\nconst TreeViewItem: (props: TreeViewItemProps & TreeViewItemDragProps) => React.ReactElement<TreeViewItemProps> =\n    (props) => (\n        props.connectDragSource<TreeViewItemProps>(\n            <div\n                className={\n          classnames(props.classNames.node, {\n            [props.classNames.nodeDragging]: props.isDragging,\n          }) }\n                key={ props.node.id }\n            >\n                <div>\n                    { props.renderNode(props.node) }\n                </div>\n                {\n                    props.node.isCollapsed\n                        ? null\n                        :\n                        <div className={ props.classNames.nodeChildren }>\n                            { props.node.children\n                                ? props.node.children.items.count() > 0\n                                ? <TreeViewItemList\n                                parentNode={ props.node }\n                                nodes={ props.node.children }\n                                classNames={ props.classNames }\n                                renderNode={ props.renderNode }\n                                onMoveNode={ props.onMoveNode }\n                            />\n                                : <TreeViewItemListEmpty\n                                parentNode={ props.node }\n                                nodes={ {\n                                        items: Immutable.List([{\n                                            id: 'dummy', title: 'dummy'\n                                        }])\n                                    } }\n                                classNames={ props.classNames }\n                                renderNode={ props.renderNode }\n                                onMoveNode={ props.onMoveNode }\n                            />\n                                : null }\n                        </div>\n                }\n            </div>\n        )\n    );\n\nconst gatherNodeIDs = (node: TreeNode): Immutable.Set<TreeNodeID> =>\n    Immutable.Set.of(node.id).union(node.children ? node.children.items.flatMap(gatherNodeIDs) : Immutable.List<string>()).toSet();\n\nconst nodeSource: DragSourceSpec<TreeViewItemProps> = {\n    beginDrag: (props, monitor, component) => ({\n        node: props.node,\n        allSourceIDs: gatherNodeIDs(props.node),\n        parentNode: props.parentNode,\n        parentChildIndex: props.parentChildIndex,\n        precedingNode: props.precedingNode,\n    } as DraggedNode),\n};\n\nconst collectNodeDragProps: (connect: DragSourceConnector, monitor: DragSourceMonitor) => TreeViewItemDragProps =\n    (connect, monitor) => ({\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    });\n\nexport const DraggableTreeViewItem = DragSource(TYPE, nodeSource, collectNodeDragProps)(TreeViewItem);\n\nexport interface TreeViewItemListProps {\n    readonly parentNode: TreeNode;\n    readonly nodes: TreeNodeList;\n    readonly renderNode: (node: TreeNode) => JSX.Element;\n    readonly classNames: TreeViewClassNames;\n    readonly onMoveNode: MoveTreeNode;\n}\n\nconst nodesWithPredecessors = (nodes: Immutable.Iterable<number, TreeNode>): Immutable.Iterable<number, { node: TreeNode, precedingNode: TreeNode }> =>\n    nodes\n        .toIndexedSeq()\n        .zipWith(\n            (node, predecessor) => ({node, precedingNode: predecessor}),\n            Immutable.Seq.of<TreeNode>(null)\n                .concat(nodes)\n        );\n\n// TODO: add a mechanism to apply the CSS equivalent:\n// .nodePositioningWrapper:hover {\n//   /* otherwise drop targets interfere with drag start */\n//   z-index: 2;\n// }\n\nexport const TreeViewItemList = (props: TreeViewItemListProps) => (\n    <div className={ props.classNames.nodeList }>\n        {\n            nodesWithPredecessors(props.nodes.items).map((node, index) =>\n                <div\n                    key={ node.node.id }\n                    style={ { position: \"relative\" } }\n                    className={ props.classNames.nodePositioningWrapper }\n                >\n                    {\n                        index === 0\n                            ? <DroppableTreeViewInsertTarget\n                            insertBefore={ true }\n                            parentNode={ props.parentNode }\n                            parentChildIndex={ index }\n                            precedingNode={ null }\n                            onMoveNode={ props.onMoveNode }\n                        />\n                            : null\n                    }\n                    <DroppableTreeViewInsertTarget\n                        insertBefore={ false }\n                        parentNode={ props.parentNode }\n                        parentChildIndex={ index + 1 }\n                        precedingNode={ node.node }\n                        onMoveNode={ props.onMoveNode }\n                    />\n                    <DraggableTreeViewItem\n                        parentNode={ props.parentNode }\n                        parentChildIndex={ index }\n                        precedingNode={ node.precedingNode }\n                        node={ node.node }\n                        classNames={ props.classNames }\n                        renderNode={ props.renderNode }\n                        onMoveNode={ props.onMoveNode }\n                    />\n                </div>\n            )\n        }\n    </div>\n);\n\nexport const TreeViewItemListEmpty = (props: TreeViewItemListProps) => (\n    <div className={ props.classNames.nodeList }>\n        {\n            nodesWithPredecessors(props.nodes.items).map((node, index) =>\n                <div\n                    key={ node.node.id }\n                    style={ { position: \"relative\" } }\n                    className={ props.classNames.nodePositioningWrapper }\n                >\n                    {\n                        index === 0\n                            ? <DroppableTreeViewInsertTarget\n                            insertBefore={ true }\n                            parentNode={ props.parentNode }\n                            parentChildIndex={ index }\n                            precedingNode={ null }\n                            onMoveNode={ props.onMoveNode }\n                        />\n                            : null\n                    }\n                    <DroppableTreeViewInsertTarget\n                        insertBefore={ false }\n                        parentNode={ props.parentNode }\n                        parentChildIndex={ index + 1 }\n                        precedingNode={ node.node }\n                        onMoveNode={ props.onMoveNode }\n                    />\n                </div>\n            )\n        }\n    </div>\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Node.tsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"Immutable\",\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"classnames\"\n ** module id = 9\n ** module chunks = 0\n **/"],"sourceRoot":""}